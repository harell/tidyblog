# tic documentation: https://docs.ropensci.org/tic/dev/

# OS ---------------------------------------------------------------------------
os: linux
dist: bionic

# meta -------------------------------------------------------------------------
language: r
r: 3.6.2
cache:
  - packages
  - ccache
latex: false

# environment variables --------------------------------------------------------
env:
  global:
    - MAKEFLAGS="-j 2"
    - R_REPOS="https://mran.microsoft.com/snapshot/2020-02-29"
    
# jobs -------------------------------------------------------------------------
before_install:
  - rm -f $HOME/.Rprofile
  - echo -e "options(Ncpus = 8, repos = structure(c(CRAN = '"$R_REPOS"')))" > $HOME/.Rprofile
  - mkdir $HOME/.R && echo -e 'CXX_STD = CXX14\n\nCC=ccache gcc -std=gnu99\nCXX=ccache g++\nCXX11=ccache g++ -std=gnu99\nCXX14=ccache g++ -std=gnu99\nC11=ccache g++\nC14=ccache g++\nFC=ccache gfortran\nF77=ccache gfortran' > $HOME/.R/Makevars
  - mkdir -p $HOME/.ccache &&  echo -e 'max_size = 5.0G\nsloppiness = include_file_ctime\nhash_dir=false' > $HOME/.ccache/ccache.conf
  - R -q -e 'source(file.path(Sys.getenv("HOME"), ".Rprofile"))'
  - R -q -e 'if(!require(remotes, quietly = TRUE)) utils::install.packages("remotes")'
  - R -q -e 'remotes::install_github("ropensci/tic", dependencies = "Imports", quiet = TRUE)'
  - R -q -e 'tic::dsl_load()'
  - R -q -e 'tic::prepare_all_stages()'
  - R -q -e 'tic::before_install()'
   #'source(file.path(Sys.getenv("HOME"), ".Rprofile"));
   #if(!require(remotes, quietly = TRUE)) utils::install.packages("remotes");
   #remotes::install_github("ropensci/tic", dependencies = "Imports", quiet = TRUE);
   #tic::dsl_load();
   #tic::prepare_all_stages();
   #tic::before_install()'
install:
  - if [ "${TRAVIS_OS_NAME}" == "osx" ]; then brew install ccache; fi
  - if [ "${TRAVIS_OS_NAME}" == "osx" ]; then export PATH="/usr/local/opt/ccache/libexec:$PATH"; fi
  - R -q -e 'tic::install()'
before_script: R -q -e 'tic::before_script()'
script: R -q -e 'tic::script()'
after_success: R -q -e 'tic::after_success()'
after_failure: R -q -e 'tic::after_failure()'
before_deploy: R -q -e 'tic::before_deploy()'
deploy:
  provider: script
  script: R -q -e 'tic::deploy()'
  on:
    all_branches: true
after_deploy: R -q -e 'tic::after_deploy()'
after_script: R -q -e 'tic::after_script()'
